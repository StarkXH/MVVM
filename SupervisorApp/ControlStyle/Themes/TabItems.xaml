<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:ControlStyle">

    <!-- 添加null值到Visibility的转换器 -->
    <common:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <Style x:Key="tabItemStyle1" TargetType="TabItem">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="Border" BorderThickness="0,0,0,2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- 新增的Image控件，支持外部设置图像源 -->
                            <Image x:Name="TabIcon" 
                               Grid.Column="0" 
                               Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(common:TabItemHelper.ImageWidth)}"
                               Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(common:TabItemHelper.ImageHeight)}"
                               Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(common:TabItemHelper.ImageMargin)}"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"
                               Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(common:TabItemHelper.ImageSource)}"
                               Visibility="{Binding RelativeSource={RelativeSource Self}, Path=Source, 
                                        Converter={StaticResource NullToVisibilityConverter}}"/>

                            <TextBlock Grid.Column="1" 
                                  Width="Auto" 
                                  x:Name="txt" 
                                  FontWeight="Bold" 
                                  Foreground="Gainsboro" 
                                  TextAlignment="Center" 
                                  VerticalAlignment="Center">
                            <ContentPresenter x:Name="ContentSite"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"
                                          ContentSource="Header"
                                          Margin="0"/>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource Silergy_Blue}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Silergy_Blue}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="txt" Property="Foreground" Value="Gainsboro"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gainsboro"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource Silergy_Blue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>

                        <common:SelectorIndicatorHelper x:Name="IndicatorHelper" Selector="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabControl}}" />
                        <common:AnimateDoubleWrapper x:Name="LeftWrapper" Target="{Binding ElementName=IndicatorHelper, Path=MarginLeft}">
                            <common:AnimateDoubleWrapper.Animation>
                                <DoubleAnimation Duration="0:0:0.4">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseIn" Exponent="4" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </common:AnimateDoubleWrapper.Animation>
                        </common:AnimateDoubleWrapper>
                        <common:AnimateDoubleWrapper x:Name="RightWrapper" Target="{Binding ElementName=IndicatorHelper, Path=MarginRight}">
                            <common:AnimateDoubleWrapper.Animation>
                                <DoubleAnimation Duration="0:0:0.4">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut" Exponent="09" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </common:AnimateDoubleWrapper.Animation>
                        </common:AnimateDoubleWrapper>


                        <common:AnimateDoubleWrapper x:Name="LeftWrapper2" Target="{Binding ElementName=IndicatorHelper, Path=MarginLeft}">
                            <common:AnimateDoubleWrapper.Animation>
                                <DoubleAnimation Duration="0:0:0.4">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut" Exponent="09" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </common:AnimateDoubleWrapper.Animation>
                        </common:AnimateDoubleWrapper>
                        <common:AnimateDoubleWrapper x:Name="RightWrapper2" Target="{Binding ElementName=IndicatorHelper, Path=MarginRight}">
                            <common:AnimateDoubleWrapper.Animation>
                                <DoubleAnimation Duration="0:0:0.4">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseIn" Exponent="4" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </common:AnimateDoubleWrapper.Animation>
                        </common:AnimateDoubleWrapper>
                        <common:Switcher x:Name="LeftSwitcher"
                                  FalseResult="{Binding ElementName=LeftWrapper2}"
                                  TrueResult="{Binding ElementName=LeftWrapper}"
                                  Value="{Binding ElementName=IndicatorHelper, Path=IsLeftToRight}" />

                        <common:Switcher x:Name="RightSwitcher"
                                  FalseResult="{Binding ElementName=RightWrapper2}"
                                  TrueResult="{Binding ElementName=RightWrapper}"
                                  Value="{Binding ElementName=IndicatorHelper, Path=IsLeftToRight}" />
                        <Grid x:Name="HeaderPanelGrid"
                       Grid.Row="0"
                       Grid.Column="0"
                       Panel.ZIndex="1">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="true" />
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle Width="{Binding ElementName=LeftSwitcher, Path=Result.Current}" />
                                <Rectangle Grid.Column="2" Width="{Binding ElementName=RightSwitcher, Path=Result.Current}" />
                                <Rectangle Grid.Column="1"
                                    Height="3"
                                    Margin="7,0,7,-2"
                                    RadiusX="2"
                                    RadiusY="2"
                                    VerticalAlignment="Bottom"
                                    Fill="{DynamicResource Silergy_Blue}"/>
                            </Grid>
                        </Grid>
                        <Border x:Name="ContentPanel"
                         Grid.Row="1"
                         Grid.Column="0"
                         Background="{TemplateBinding Background}"
                         BorderBrush="{TemplateBinding BorderBrush}"
                         BorderThickness="{TemplateBinding BorderThickness}"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                       Margin="{TemplateBinding Padding}"
                                       ContentSource="SelectedContent"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
</ResourceDictionary>